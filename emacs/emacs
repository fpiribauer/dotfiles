;; Emacs configuration

;; Package management
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

(add-to-list 'package-archives
             '("marmalade" . "https://marmalade-repo.org/packages/")
             t)

(package-initialize)

(package-refresh-contents)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Personal info
(setq user-mail-address "Freggar@gmail.com"
      user-full-name    "Freggar None")

(setq vc-follow-symlinks t)
(setq inhibit-startup-message t)
(setq make-backup-files nil)

(setq-default fringes-outside-margins t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)

(set-frame-font "Source Code Pro for Powerline")
(set-face-attribute 'default nil :height 100)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)

(show-paren-mode 1)
(column-number-mode 1)

(set-default 'cursor-type 'box)

(global-hl-line-mode 0)
(global-visual-line-mode 0)

(setq evil-want-C-u-scroll t)
;;EVIL-MODE
(require 'evil)
(evil-mode 1)

(require 'linum)
(global-linum-mode 1)

(defvar my-linum-format-string "%3d ")
(add-hook 'linum-before-numbering-hook 'my-linum-get-format-string)

(defun my-linum-get-format-string ()
  (let* ((width (1+ (length (number-to-string
                             (count-lines (point-min) (point-max))))))
         (format (concat "%" (number-to-string width) "d ")))
    (setq my-linum-format-string format)))

(defvar my-linum-current-line-number 0)

(setq linum-format 'my-linum-relative-line-numbers)

(defun my-linum-relative-line-numbers (line-number)
  (let ((offset (abs (- line-number my-linum-current-line-number))))
    (propertize (format my-linum-format-string offset) 'face 'linum)))

(defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
    ad-do-it))
(ad-activate 'linum-update)

;; Twitter Mode! yay
;; (require 'twittering-mode)
(setq twittering-use-master-password t)
(setq twittering-icon-mode t)

;; Latex export
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")))

;; Org DONE setup
(setq org-log-done 'note)
;; Org-Tags! 
(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("workflow" . ?w) ("freetime" . ?f)))
;; Default  browser for exporting and stuff!
(eval-after-load "org"
  '(progn
     ;; .txt files aren't in the list initially, but in case that changes
     ;; in a future version of org, use if to avoid errors
     (if (assoc "\\.txt\\'" org-file-apps)
         (setcdr (assoc "\\.txt\\'" org-file-apps) "notepad.exe %s")
       (add-to-list 'org-file-apps '("\\.txt\\'" . "notepad.exe %s") t))
     ;; Change .pdf association directly within the alist
     (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")
     (setcdr (assoc "\\.x?html?\\'" org-file-apps) "firefox %s"))) 
;; Fancy bullet points!
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; Org directory
(defvar org-directory "~/org")
;; GTD file
(defvar org-gtd-file "~/org/ag/gtd.org")
;; File contains all indefinetley postoned stuff
(defvar org-hold-file "~/org/hold.org")
;; DONE File
(defvar org-done-file "~/org/done.org")

(defun gtd ()
  "Open the GTD file."
  (interactive)
  (find-file org-gtd-file))
(defun notes ()
  "Open the note file."
  (interactive)
  (find-file org-default-notes-file))


;; ORG Mode Keybindings
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cg" 'gtd)
(global-set-key "\C-cn" 'notes)

;; ORG TODO-Keywords
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))

;; org-capture
(setq org-default-notes-file (concat org-directory "/notes.org"))
(setq org-agenda-files (list org-gtd-file))
;; Let the stuff from notes.org be refiled
(setq org-refile-targets
      '((org-default-notes-file :maxlevel . 3)
        (org-gtd-file :maxlevel . 3)
        (org-done-file :maxlevel . 3)
        (org-hold-file :maxlevel . 3)))

;; org-archive all done tasks
(defun org-archive-done-tasks ()
  "Archive all tasks that either have the tag DONE or CANCELLED"
  (interactive)
  (message "Start archiving tasks")
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/CANCELLED|DONE" 'agenda)
  (message "Finished archiving task"))
;; org-todo archive todos after call!
(defun org-todo-archive ()
 "Change todo state and archive done TASKS after that"
 (interactive)
 (org-todo)
 (org-archive-done-tasks))
 
;; (with-eval-after-load 'org
;;   (define-key org-mode-map (kbd "C-c C-t") 'org-todo-archive))

(add-hook 'org-ctrl-c-ctrl-c-final-hook 'org-archive-done-tasks)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (org-mobile-sync use-package org-bullets evil))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
